# Default values for exportarr.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
exportarr:
  ## base image used for all exportarr instances
  image:
    repository: ghcr.io
    name: onedr0p/exportarr
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: ""

  ## set image for post install helm tests
  testImage:
    repository: docker.io
    name: busybox
    tag: "1.36.1"
    pullPolicy: IfNotPresent
    path: /healthz

  ## update strategy for newer versions
  updateStrategy:
    type: Recreate

  imagePullSecrets: []
  nameOverride: ""
  fullnameOverride: ""

  ## set service properties
  service:
    type: ClusterIP
    port: 9707
    name: metrics
    protocol: TCP

  ## set default metrics export properties
  metrics:
    ## enable/disable metrics for all exportarr instances.
    enabled: true
    podAnnotations:
      prometheus.io/scrape: "true"
      prometheus.io/path: /metrics
      prometheus.io/port: "9707"
    ## if serviceMonitor enabled, pod annotations above will be ignored
    ## ServiceMonitor for each exportarr instance will be deployed instead
    serviceMonitor:
      enabled: false
      path: /metrics
      # how often to scrape
      interval: 4m
      scrapeTimeout: 60s
      additionalLabels: {}
      targetLabels: []
      # ref: https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/api.md#endpoint
      relabelings: []
      metricRelabelings: []
    ## Enable and configure Prometheus Rules for the chart under this key.
    ## not yet implemented
    prometheusRule:
      enabled: false
      labels: {}
      # -- Configure additionial rules for the chart under this key.
      rules: []
        # - alert: UpsStatusUnknown
        #   annotations:
        #     description: UPS {{ "{{ $labels.ups }}" }} is reporting a status of unknown.
        #     summary: UPS status unknown.
        #   expr: |
        #     nut_status == 0
        #   for: 10s
        #   labels:
        #     severity: critical

  ### exportarr configuration per instance/app ###
  apps:
    radarr:
      # `exportarr-radarr-` prefix will be added to the pod name
    - name: main
      enabled: false
      url: ""
      # optional, use instead of `apiKey`
      # this secret should provide the `apiKey` used for auth
      # if auth is not required, do not provide any `secretKey` or `apiKey`
      existingSecret:
        # name of secret
        name: ""
        # name of key within secret to use
        # example: "radarr_api_key"
        secretKey: ""
      # ignored if `existingSecret` is used
      apiKey: ""
      extraEnv: {}
        # ENABLE_ADDITIONAL_METRICS: true
      ## Additional volumes on the output Deployment definition.
      volumes: []
      ## Additional volumeMounts on the output Deployment definition.
      volumeMounts: []
      # override default metrics settings for this instance - should specify all `key: value` pairs
      metrics: {}
        # podAnnotations:
        #   prometheus.io/scrape: "true"
        #   prometheus.io/path: /metrics
        #   prometheus.io/port: "9707"
        # serviceMonitor:
        #   # -- overrides podAnnotations if enabled
        #   enabled: false
        #   path: /metrics
        #   # how often to scrape
        #   interval: 4m
        #   scrapeTimeout: 60s
        #   additionalLabels: {}
        #   targetLabels: []
        #   # ref: https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/api.md#endpoint
        #   relabelings: []
        #   metricRelabelings: []
    sonarr:
      # `exportarr-sonarr-` prefix will be added to the pod name
    - name: main
      enabled: false
      url: ""
      existingSecret:
        # name of secret
        name: ""
        # name of key within secret to use
        # example: "sonarr_api_key"
        secretKey: ""
      # ignored if `existingSecret` is used
      apiKey: ""
      extraEnv: {}
        # ENABLE_ADDITIONAL_METRICS: true
      volumes: []
      volumeMounts: []
      metrics: {}
    prowlarr:
      # `exportarr-prowlarr-` prefix will be added to the pod name
    - name: main
      enabled: false
      url: ""
      existingSecret:
        # name of secret
        name: ""
        # name of key within secret to use
        # example: "prowlarr_api_key"
        secretKey: ""
      # ignored if `existingSecret` is used
      apiKey: ""
      extraEnv: {}
      volumes: []
      volumeMounts: []
      metrics: {}
    bazarr:
      # `exportarr-bazarr-` prefix will be added to the pod name
    - name: main
      enabled: false
      url: ""
      existingSecret:
        # name of secret
        name: ""
        # name of key within secret to use
        # example: "bazarr_api_key"
        secretKey: ""
      # ignored if `existingSecret` is used
      apiKey: ""
      extraEnv: {}
      volumes: []
      volumeMounts: []
      metrics: {}
    lidarr:
      # `exportarr-lidarr-` prefix will be added to the pod name
    - name: main
      enabled: false
      url: ""
      existingSecret:
        # name of secret
        name: ""
        # name of key within secret to use
        # example: "lidarr_api_key"
        secretKey: ""
      # ignored if `existingSecret` is used
      apiKey: ""
      extraEnv: {}
      volumes: []
      volumeMounts: []
      metrics: {}
    sabnzbd:
      # `exportarr-sabnzbd-` prefix will be added to the pod name
    - name: main
      enabled: false
      url: ""
      existingSecret:
        # name of secret
        name: ""
        # name of key within secret to use
        # example: "sabnzbd_api_key"
        secretKey: ""
      # ignored if `existingSecret` is used
      apiKey: ""
      extraEnv: {}
      volumes: []
      volumeMounts: []
      metrics: {}
    readarr:
      # `exportarr-readarr-` prefix will be added to the pod name
    - name: main
      enabled: false
      url: ""
      existingSecret:
        # name of secret
        name: ""
        # name of key within secret to use
        # example: "readarr_api_key"
        secretKey: ""
      # ignored if `existingSecret` is used
      apiKey: ""
      extraEnv: {}
      volumes: []
      volumeMounts: []
      metrics: {}

  ### below section will be applied to all exportarr instances ###
  ## env applied to all exportarr exporters
  ## example: `ENABLE_ADDITIONAL_METRICS` to get additional metrics that take longer to scrape
  extraEnv: {}
    # ENABLE_ADDITIONAL_METRICS: true

  ## Additional volumes to all exportarr exporters
  volumes: []
  # - name: foo
  #   secret:
  #     secretName: mysecret
  #     optional: false
  ## Additional volumeMounts on the output Deployment definition.
  volumeMounts: []
  # - name: foo
  #   mountPath: "/etc/foo"
  #   readOnly: true


  podAnnotations: {}

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  ## Set resource level per exportarr deployment
  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  nodeSelector: {}

  tolerations: []

  affinity: {}
  ## Use `/status` path for checks
  ## Liveness probe
  livenessProbe:
    httpGet:
      path: /healthz
      port: metrics
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 3
    failureThreshold: 5
    successThreshold: 1

  ## Readiness probe
  readinessProbe:
    httpGet:
      path: /healthz
      port: metrics
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 2
    failureThreshold: 5
    successThreshold: 1

  ## Startup Probe
  startupProbe:
    httpGet:
      path: /healthz
      port: metrics
    initialDelaySeconds: 2
    periodSeconds: 5
    timeoutSeconds: 2
    failureThreshold: 5
    successThreshold: 1

  serviceAccount:
    # Specifies whether a service account should be created
    create: false
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""


### Optional included qbittorrent exporter ###
## some sample values below but look at upstream chart for more options
## set `enabled: true` to install qbittorrent prometheus exporter from separate chart
## Ref: https://github.com/homeylab/helm-charts/tree/main/charts/qbittorrent-exporter
qbittorrent-exporter:
  # enable/disable
  enabled: false
  # more options available than shown
  metrics:
    serviceMonitor:
      enabled: false
  settings:
    config:
      base_url: ""
    auth:
      existingSecret: ""
      username: ""
      password: ""
  # extra env applied to exporter
  extraEnv: {}

### Optional included tdarr exporter ###
## some sample values below but look at upstream chart for more options
## set `enabled: true` to install tdarr prometheus exporter from separate chart
## Ref: https://github.com/homeylab/helm-charts/tree/main/charts/tdarr-exporter
tdarr-exporter:
  enabled: false
  metrics:
    serviceMonitor:
      enabled: false
  settings:
    # more options available than shown
    config:
      # If no protocol is provided (http/https), defaults to using https. 
      # Examples: `tdarr.example.com`, `http://tdarr.example.com`
      url: ""
      # if auth is not required, do not provide any `secretKey` or `apiKey`
      existingSecret:
        # name of secret
        name: ""
        # name of key within secret to use
        secretKey: ""
      # ignored if `existingSecret` is used
      apiKey: ""
      # If set to `false`, the exporter will not verify the SSL certificate of the tdarr instance.
      verify_ssl: true
      log_level: "info"
  # extra env applied to exporter
  extraEnv: {}
