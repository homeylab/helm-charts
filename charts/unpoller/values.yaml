# Default values for unifi-unpoller.
replicaCount: 1

## From: https://github.com/unpoller/unpoller/pkgs/container/unpoller
image:
  repository: ghcr.io
  name: unpoller/unpoller
  pullPolicy: IfNotPresent
  # Overrides the image tag, default is the chart appVersion.
  tag: ""

## set image for post install helm tests
testCurlImage:
  repository: docker.io
  name: busybox
  tag: "1.36.1"
  pullPolicy: IfNotPresent

updateStrategy:
  type: Recreate

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

## extra pod annotations
podAnnotations: {}

service:
  type: ClusterIP
  port: 9130
  protocol: TCP
  name: metrics

## Use prometheus service monitor instead for Prom operator
metrics:
  enabled: true
  podAnnotations:
    prometheus.io/scrape: "true"
    prometheus.io/path: /metrics
    prometheus.io/port: "9130"
  ## if serviceMonitor enabled, pod annotations will be ignored
  serviceMonitor:
    enabled: false
    interval: 30s
    scrapeTimeout: 10s
    additionalLabels: {}
    targetLabels: []
    # ref: https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/api.md#endpoint
    relabelings: []
    metricRelabelings: []
  ## Enable and configure Prometheus Rules for the chart under this key.
  ## not yet implemented
  prometheusRule:
    enabled: false
    labels: {}
    # -- Configure additional rules for the chart under this key.
    rules: []
      # - alert: UpsStatusUnknown
      #   annotations:
      #     description: UPS {{ "{{ $labels.ups }}" }} is reporting a status of unknown.
      #     summary: UPS status unknown.
      #   expr: |
      #     nut_status == 0
      #   for: 10s
      #   labels:
      #     severity: critical

## Optionally place your credentials in a secret
## Loaded in env
existingSecret: ""

## General configuration
## below show default values if specified
settings:
  ## Uses `_0_` number (ref: https://unpoller.com/docs/install/configuration - multiple controllers section)
  ## for additional controllers to scrape, use `extraEnv section` starting with `_1_`
  unifi:
    config:
      url: ""
      save_sites: true
      save_ids: false
      save_events: false
      save_alarms: false
      save_anomalies: false
      save_dpi: false
      verify_ssl: false
    ## if existing secrets is supplied, below section is ignored
    ## to use in a secret, use `UP_UNIFI_CONTROLLER_0_{USER/PASS}` in secret key
    auth:
      ## For a Non UnifiOS Controller (like: https://hub.docker.com/r/linuxserver/unifi-controller):
      ## Email field will be the `username`
      ## change the below to your created user/pass
      user: ""
      pass: ""
  ## influxdb configuration if applicable
  ## additional configuration for influxdb can be specified in `extraEnv`
  influxdb:
    enabled: false
    config:
      url: ""
      db: ""
      interval: ""
    ## if existing secrets is supplied, below section is ignored
    auth:
      user: ""
      pass: ""
      auth_token: ""
  ## additional configuration for prometheus can be specified in `extraEnv`
  prometheus:
    ## use below to disable prom metrics in unpoller
    # disable: false

    ## NOTE: by default the image is going to use the value of UP_PROMETHEUS_NAMESPACE ( not your actual deployed namespace) to prepend the metrics
    ## example: "{{ namespace }}_client_receive_bytes_total" => "unpoller_client_receive_bytes_total"
    ## Since the grafana charts (https://github.com/unpoller/dashboards) all have "unpoller" set in the prom queries, you should put this as "unpoller"
    ## TO work with the existing grafana dashboards unpoller provides, it is highly recommended to leave it as default: "unpoller"
    ## You can install this helm chart in any namespace you'd like though, just keep it the below var equal to "unpoller" for metrics
    # UP_PROMETHEUS_NAMESPACE: "unpoller"
    namespace: "unpoller"
    http_listen: "0.0.0.0:9130"
    
    ## additional settings
    # report_errors: false
    # buffer: "50"
  ## additional configuration for unpoller can be specified in `extraEnv`
  unpoller:
    debug: false
    quiet: false


## additional configuration for the above unifi config section can be specified with `_0_`
## for additional controllers to scrape, start with `_1_`
## all keys will be uppercased just in case
## Ref: https://unpoller.com/docs/install/dockercompose
extraEnv: {}
  ## Some examples below
  # UP_UNIFI_DYNAMIC: false
  # UP_UNIFI_CONTROLLER_1_USER: ""
  ## optionally beloww could be supplied in `existingSecret` section
  # UP_UNIFI_CONTROLLER_1_PASS: ""
  # UP_UNIFI_CONTROLLER_1_SAVE_ALARMS: "true"
  # UP_UNIFI_CONTROLLER_1_SAVE_ANOMALIES: "true"
  # UP_UNIFI_CONTROLLER_1_SAVE_DPI: "true"
  # UP_UNIFI_CONTROLLER_1_SAVE_EVENTS: "true"
  # UP_UNIFI_CONTROLLER_1_SAVE_IDS: "true"
  # UP_UNIFI_CONTROLLER_1_SAVE_SITES: "true"
  ## change the below to your unifi instance
  # UP_UNIFI_CONTROLLER_1_URL: https://unifi.localdomain:8443

## Liveness probe
## port: "prom" = .Values.service.port in the deployment file
## https://unpoller.com/docs/advanced/api  - health check endpoint
livenessProbe:
  httpGet:
    path: /health
    port: metrics
  initialDelaySeconds: 2
  periodSeconds: 20
  timeoutSeconds: 2
  failureThreshold: 5
  successThreshold: 1

## Readiness probe
## port: "prom" = .Values.service.port in the deployment file
## https://unpoller.com/docs/advanced/api - health check endpoint
readinessProbe:
  httpGet:
    path: /health
    port: metrics
  initialDelaySeconds: 5
  periodSeconds: 10
  timeoutSeconds: 2
  failureThreshold: 5
  successThreshold: 1

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}